// UDP Client
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024
#define SERVER_IP "127.0.0.1" // Server IP address

int main() {
    int sockfd;
    char buffer[BUFFER_SIZE];
    struct sockaddr_in servaddr;
    socklen_t len;

    // Creating socket file descriptor
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    // Filling server information
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    len = sizeof(servaddr);
    while (1) {
        printf("Enter message for server: ");
        fgets(buffer, BUFFER_SIZE, stdin);

        // Send message to the server
        int n = sendto(sockfd, buffer, strlen(buffer), 0, (const struct sockaddr *) &servaddr, len);
        if (n < 0) {
            perror("sendto failed");
            break;
        }

        // Receive the server's response
        n = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *) &servaddr, &len);
        if (n < 0) {
            perror("recvfrom failed");
            break;
        }
        buffer[n] = '\0';
        printf("Server: %s\n", buffer);

        // Exit the loop if "exit" message is sent
        if (strncmp(buffer, "exit", 4) == 0) {
            printf("Client exiting...\n");
            break;
        }
    }

    close(sockfd);
    return 0;
}
in the terminal
// gcc client.c -o client
// ./client



// UDP Server
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    char buffer[BUFFER_SIZE];
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;

    // Creating socket file descriptor
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    // Filling server information
    servaddr.sin_family = AF_INET;         // IPv4
    servaddr.sin_addr.s_addr = INADDR_ANY; // Accept connections from any IP
    servaddr.sin_port = htons(PORT);       // Port number

    // Bind the socket with the server address
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);
    
    // Server loop to receive and echo messages
    len = sizeof(cliaddr);
    while (1) {
        int n = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *) &cliaddr, &len);
        if (n < 0) {
            perror("recvfrom failed");
            break;
        }
        buffer[n] = '\0';
        printf("Client: %s\n", buffer);

        // Echo message back to the client
        if (sendto(sockfd, buffer, n, 0, (const struct sockaddr *) &cliaddr, len) < 0) {
            perror("sendto failed");
            break;
        }
        printf("Echoed message back to client\n");
    }

    close(sockfd);
    return 0;
}
in the terminal
// gcc server.c -o server
// ./server



// PYTHON
/*
// Client Side:

import socket
# Define the server IP address and port
server_ip = '127.0.0.1' # Replace with the server's IP 
address or use 'localhost' for local testing
server_port = 12345 # Match the server's port number
# Create a UDP socket
client_socket = socket.socket(socket.AF_INET, 
socket.SOCK_DGRAM)
while True:
 try:
 # Get user input
 message = input("Enter a message (or 'exit' to quit): 
")
 if message.lower() == 'exit':
 break
 # Send the message to the server
 client_socket.sendto(message.encode('utf-8'), 
(server_ip, server_port))
 # Receive a response from the server
 response, server_address = 
client_socket.recvfrom(1024)
 print(f"Response from server ({server_address}): 
{response.decode('utf-8')}")
 except KeyboardInterrupt:
 print("Client terminated by the user.")
 break
# Close the client socket
client_socket.close()


cd locaton
python client.py

*/


// PYTHON
/*
// Server Side:

import socket
# Define the server IP address and port
server_ip = '127.0.0.1' # Replace with your server's IP 
address or use 'localhost' for local testing
server_port = 12345 # Choose a port number
# Create a UDP socket
server_socket = socket.socket(socket.AF_INET, 
socket.SOCK_DGRAM)
# Bind the socket to the server address and port
server_socket.bind((server_ip, server_port))
print(f"Server listening on {server_ip}:{server_port}")
while True:
 try:
 # Receive data from the client
 data, client_address = server_socket.recvfrom(1024)
 print(f"Received message from {client_address}: 
{data.decode('utf-8')}")
 # Process the received data (You can add your own 
logic here)
 # Send a response back to the client
 response = "Message received by the server."
 server_socket.sendto(response.encode('utf-8'), 
client_address)
 except KeyboardInterrupt:
 print("Server terminated by the user.")
 break
# Close the server socket
server_socket.close()

cd locaton
python server.py

*/










other

●	Programs:
a.	Socket Programming TCP
Server



import socket
s = socket.socket()

print("Socket successfully created")

port = 12345
s.bind(('',port))
print("Socket binded to port %s" %(port))
print(f"Socket binded to port {port}")

s.listen(5)

while True:
    c,addr = s.accept()
    print(f"Got connection from {addr}")
    c.send('Thank you for connecting\n'.encode())
    break

c.close()

Client
import socket

s=socket.socket()
port = 12345

s.connect(('localhost',port))

print(s.recv(1024).decode())

s.close()

b.	Socket Programming UDP
Server
import socket

server_socket=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
print('UDP Server Created')

port = 12345

server_socket.bind(('',port))
print(f'Socket binded to port {port}')

try:
    while True:
        print('Waiting for connection')
        data, addr = server_socket.recvfrom(1024)
        print(f'Message Recieved: {data.decode()}from {addr}')

        message = 'Thank you for connecting'
        server_socket.sendto(message.encode(),addr)

finally:
    server_socket.close()

Client
import socket

client_socket = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
server_address = ('localhost',12345)

try:
    message = "Hello Server!\n"
    client_socket.sendto(message.encode(),server_address)
    print(f"Sent Message: {message}")

    data,_= client_socket.recvfrom(1024)
    print(f"Recieved from server: {data.decode()}")

finally:
    client_socket.close()


